/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package formularios;

import conexion.ConexionSingleton;
import java.awt.Frame;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author ALUMNOM
 */
public class JI_Prestamos extends javax.swing.JInternalFrame {

    private static JI_Prestamos instancia;
    public DefaultTableModel tablaPrestamos;

    /**
     * Creates new form JI_Prestamos
     */
    public static JI_Prestamos getInstancia() {
        // Si la instancia no está creada o la ventana está cerrada se crea la instancia

        if (instancia == null) {
            instancia = new JI_Prestamos();
        }
        return instancia;
    }

    private JI_Prestamos() {
        initComponents();
        tablaPrestamos = (DefaultTableModel) jTablePrestamos.getModel();
        llenarTablaPrestamosInicio();
    }

    private void llenarTablaPrestamosInicio() {
        try {
            String sql = " SELECT P.IDPRESTAMO,S.APELLIDOS,L.TITULO,P.FECHASALIDA,P.FECHAMAXIMA,P.FECHAENTREGA,P.DEVUELTO "
                    + " FROM BPRESTAMOS P,BLIBROS L , BSOCIOS S "
                    + " WHERE P.IDSOCIO = S.IDSOCIO "
                    + " AND P.IDLIBRO = L.IDLIBRO "
                    + " AND P.ELIMINADO = 0";
            llenarTablaPrestamos(sql);
        } catch (SQLException ex) {
            Logger.getLogger(JI_Prestamos.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void llenarTablaPrestamos(String sql) throws SQLException {
        limpiarTabla(tablaPrestamos);
        ResultSet filas;
        try (Statement consulta = ConexionSingleton.conexion.createStatement()) {
            filas = consulta.executeQuery(sql);
            while (filas.next()) {
                Object nuevo[] = {filas.getInt("IDPRESTAMO"), filas.getString("APELLIDOS"), filas.getString("TITULO"),
                    filas.getInt("FECHASALIDA"), filas.getInt("FECHAMAXIMA"), filas.getInt("FECHAENTREGA"),
                    filas.getString("DEVUELTO")};
                tablaPrestamos.addRow(nuevo);
            }
        }
        filas.close();
        setOcultarColumnasJTable(jTablePrestamos, new int[]{0});
    }
    private void filtrar(){
        try {
            String sql = " SELECT P.IDPRESTAMO,S.APELLIDOS,L.TITULO,P.FECHASALIDA,P.FECHAMAXIMA,P.FECHAENTREGA,P.DEVUELTO "
                    + " FROM BPRESTAMOS P,BLIBROS L , BSOCIOS S "
                    + " WHERE P.IDSOCIO = S.IDSOCIO "
                    + " AND P.IDLIBRO = L.IDLIBRO ";
            if (radioEliminados.isSelected()) {
                sql = sql + " AND P.ELIMINADO =1";
            } else {
                sql = sql + " AND P.ELIMINADO =0";
            }   
            sql = sql + " order by S.APELLIDOS";

            llenarTablaPrestamos(sql);
        } catch (SQLException ex) {
            Logger.getLogger(JI_Prestamos.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    

    public static void setOcultarColumnasJTable(JTable tbl, int columna[]) {
        for (int i = 0; i < columna.length; i++) {
            tbl.getColumnModel().getColumn(columna[i]).setMaxWidth(0);
            tbl.getColumnModel().getColumn(columna[i]).setMinWidth(0);
            tbl.getTableHeader().getColumnModel().getColumn(columna[i]).setMaxWidth(0);
            tbl.getTableHeader().getColumnModel().getColumn(columna[i]).setMinWidth(0);
        }
    }

    private void limpiarTabla(DefaultTableModel tabla) {
        int a = tabla.getRowCount() - 1;  //Índices van de 0 a n-1
        for (int i = a; i >= 0; i--) {
            tabla.removeRow(i);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTablePrestamos = new javax.swing.JTable();
        btnPrestamo = new javax.swing.JButton();
        btnDevolucion = new javax.swing.JButton();
        btnModificar = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();
        btnSalir = new javax.swing.JButton();
        radioEliminados = new javax.swing.JRadioButton();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setTitle("PRESTAMOS");

        jTablePrestamos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "IdPrestamo", "Socio", "Libro", "FechaSalida", "FechaMaxima", "FechaEntrega", "Devuelto"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTablePrestamos);

        btnPrestamo.setText("Prestamo");
        btnPrestamo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPrestamoActionPerformed(evt);
            }
        });

        btnDevolucion.setText("Devolucion");
        btnDevolucion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDevolucionActionPerformed(evt);
            }
        });

        btnModificar.setText("Modificar");
        btnModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModificarActionPerformed(evt);
            }
        });

        btnEliminar.setText("Eliminar");
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });

        btnSalir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/EXIT_ (23).jpg"))); // NOI18N
        btnSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalirActionPerformed(evt);
            }
        });

        radioEliminados.setText("Eliminados");
        radioEliminados.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                radioEliminadosStateChanged(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(61, 61, 61)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 578, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(radioEliminados)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(btnDevolucion, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnPrestamo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnModificar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnEliminar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnSalir, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap(44, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addComponent(radioEliminados)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnPrestamo)
                        .addGap(18, 18, 18)
                        .addComponent(btnDevolucion)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnModificar)
                        .addGap(18, 18, 18)
                        .addComponent(btnEliminar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnSalir))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(89, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnPrestamoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPrestamoActionPerformed
        // TODO add your handling code here:
        Frame f = JOptionPane.getFrameForComponent(this);
        JD_PrestamoNuevo dialogPrestamoNuevo = new JD_PrestamoNuevo(f, true, "0");
        dialogPrestamoNuevo.dispose();
        dialogPrestamoNuevo.setVisible(true);
        // Actualizamos el jTable
        llenarTablaPrestamosInicio();
    }//GEN-LAST:event_btnPrestamoActionPerformed

    private void btnDevolucionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDevolucionActionPerformed
        // TODO add your handling code here:

        if (jTablePrestamos.getRowCount() == 0) {
            JOptionPane.showMessageDialog(null, "No hay préstamos");
        } else {

            if (jTablePrestamos.getSelectedRow() != -1) {
                try {
                    String idPrestamo = String.valueOf(jTablePrestamos.getValueAt(jTablePrestamos.getSelectedRow(), 0));
                    if (estaDevuelto(idPrestamo)) {
                        JOptionPane.showMessageDialog(null, "El prestamo ha sido devuelto");
                    } else {
                        Frame f = JOptionPane.getFrameForComponent(this);
                        JD_DatosPrestamo dialogDatosPrestamo = new JD_DatosPrestamo(f, true, idPrestamo);
                        dialogDatosPrestamo.dispose();
                        dialogDatosPrestamo.setVisible(true);
                        // Actualizamos el jTable
                        llenarTablaPrestamosInicio();
                    }
                } catch (SQLException ex) {
                    Logger.getLogger(JI_Prestamos.class.getName()).log(Level.SEVERE, null, ex);
                }
            } else {
                JOptionPane.showMessageDialog(null, "No se ha seleccionado ninguno");
            }
        }
    }//GEN-LAST:event_btnDevolucionActionPerformed

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        // TODO add your handling code here:
         if(radioEliminados.isSelected()){
            eliminarORestaurar("0","restaurar");
        }else{
             eliminarORestaurar("1","eliminar");
        }
    }//GEN-LAST:event_btnEliminarActionPerformed

     public void eliminarORestaurar(String numero, String texto) {

        if (jTablePrestamos.getRowCount() == 0) {
            JOptionPane.showMessageDialog(null, "No hay socios");
        } else {

            if (jTablePrestamos.getSelectedRow() != -1) {
                
                //devuelve el valor de la fila selecciona y la columna 0
                int fila = jTablePrestamos.getSelectedRow();
                
               
                    int opcion = JOptionPane.showConfirmDialog(null, "¿Desea " + texto + " el prestamo : " + jTablePrestamos.getValueAt(fila, 2) + "?");
                    if (opcion == JOptionPane.YES_OPTION) {
                        try {
                            String sql = "update bprestamos set eliminado=" + numero + " where idprestamo=" + jTablePrestamos.getValueAt(fila, 0);
                            ResultSet filas;
                            try (Statement consulta = ConexionSingleton.conexion.createStatement()) {
                                filas = consulta.executeQuery(sql);
                                tablaPrestamos.removeRow(fila);
                                String texto2;
                                if (texto.equals("eliminar")) {
                                    texto2 = "eliminado";
                                } else {
                                    texto2 = "restaurado";
                                }
                                JOptionPane.showMessageDialog(null, "Registro " + texto2);

                            }
                            filas.close();
                        } catch (SQLException ex) {
                            Logger.getLogger(JI_Socios.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                
            } else {
                JOptionPane.showMessageDialog(null, "No se ha seleccionado ninguno");
            }
                }
                    
        }
    private void btnSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalirActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_btnSalirActionPerformed

    private void radioEliminadosStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_radioEliminadosStateChanged
        // TODO add your handling code here:
       if(radioEliminados.isSelected()){
            btnEliminar.setText("Restaurar");
        }else{
            btnEliminar.setText("Eliminar");
        }
        filtrar();
    }//GEN-LAST:event_radioEliminadosStateChanged

    private void btnModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModificarActionPerformed
        // TODO add your handling code here:
        if (jTablePrestamos.getRowCount() == 0) {
            JOptionPane.showMessageDialog(null, "No hay Socio");
        } else {
            if (jTablePrestamos.getSelectedRow() != -1) {
                //devuelve el valor de la fila selecciona y la columna que es código departamento
                String idEditorial = String.valueOf(jTablePrestamos.getValueAt(jTablePrestamos.getSelectedRow(), 0));
                Frame f = JOptionPane.getFrameForComponent(this);
                JD_PrestamoNuevo socioNuevo = new JD_PrestamoNuevo(f, true, idEditorial);
                socioNuevo.setVisible(true);
            } else {
                JOptionPane.showMessageDialog(null, "No se ha seleccionado ninguno");
            }
        }
        llenarTablaPrestamosInicio();
    }//GEN-LAST:event_btnModificarActionPerformed

    private boolean estaDevuelto(String idPrestamo) throws SQLException {
        String sql = "SELECT DEVUELTO FROM BPRESTAMOS WHERE ELIMINADO = 0"
                + "AND IDPRESTAMO= " + idPrestamo;
        ResultSet filas;
        try (Statement consulta = ConexionSingleton.conexion.createStatement()) {
            filas = consulta.executeQuery(sql);
            while (filas.next()) {
                Object nuevo[] = {filas.getString("DEVUELTO")};
                if (nuevo[0].equals("s")) {
                    return true;
                }
            }
        }
        return false;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDevolucion;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnModificar;
    private javax.swing.JButton btnPrestamo;
    private javax.swing.JButton btnSalir;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTablePrestamos;
    private javax.swing.JRadioButton radioEliminados;
    // End of variables declaration//GEN-END:variables
}
