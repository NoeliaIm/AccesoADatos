/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package formularios;

import java.awt.Frame;
import java.util.Iterator;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import modelo.Blibros;
import modelo.Bmaterias;
import org.hibernate.Query;
import org.hibernate.Session;
import org.hibernate.Transaction;

/**
 *
 * @author Juan
 */
public class JI_Materias extends javax.swing.JInternalFrame {

    private static JI_Materias instancia;
    public DefaultTableModel tablaMaterias;

    public static JI_Materias getInstancia() {
        // Si la instancia no está creada o la ventana está cerrada se crea la instancia

        if (instancia == null) {
            instancia = new JI_Materias();
        }
        return instancia;
    }

    /**
     * Creates new form JI_Materias
     */
    private JI_Materias() {
        initComponents();
        tablaMaterias = (DefaultTableModel) jTableMaterias.getModel();
        llenarTablaMateriasInicioHibernate();
    }

    private void llenarTablaMateriasHibernate(String sql) {
        limpiarTabla(tablaMaterias);
        Session sesion = JF_Menu.instanciaHibernate.openSession();
        Query consulta = sesion.createQuery(sql);
        Iterator iter = consulta.iterate();
        while (iter.hasNext()) {
            Bmaterias mat = (Bmaterias) iter.next();
            Object nuevo[] = {Integer.toString(mat.getIdmateria()), mat.getDescmateria()};
            tablaMaterias.addRow(nuevo);
        }
        sesion.close();
        setOcultarColumnasJTable(jTableMaterias, new int[]{0});
    }

    private void llenarTablaMateriasInicioHibernate() {
        String sql = "FROM Bmaterias m  WHERE m.eliminado=0 ORDER BY m.descmateria";
        llenarTablaMateriasHibernate(sql);
    }

    private void filtrar() {

        String sql = "FROM Bmaterias m";

        if (radioEliminados.isSelected()) {
            sql = sql + " WHERE m.eliminado =1";
        } else {
            sql = sql + " WHERE m.eliminado =0";
        }
        if (txtDescripcion.getText().length() > 0) {
            sql = sql + " and upper(m.descmateria) like '%" + txtDescripcion.getText().toUpperCase() + "%'";
        }

        sql = sql + " order by m.descmateria";

        llenarTablaMateriasHibernate(sql);

    }

    public static void setOcultarColumnasJTable(JTable tbl, int columna[]) {
        for (int i = 0; i < columna.length; i++) {
            tbl.getColumnModel().getColumn(columna[i]).setMaxWidth(0);
            tbl.getColumnModel().getColumn(columna[i]).setMinWidth(0);
            tbl.getTableHeader().getColumnModel().getColumn(columna[i]).setMaxWidth(0);
            tbl.getTableHeader().getColumnModel().getColumn(columna[i]).setMinWidth(0);
        }
    }

    private void limpiarTabla(DefaultTableModel tabla) {
        int a = tabla.getRowCount() - 1;  //Índices van de 0 a n-1
        for (int i = a; i >= 0; i--) {
            tabla.removeRow(i);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        txtDescripcion = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableMaterias = new javax.swing.JTable();
        btnNuevo = new javax.swing.JButton();
        btnModificar = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();
        btnSalir = new javax.swing.JButton();
        btnLimpiar = new javax.swing.JButton();
        radioEliminados = new javax.swing.JRadioButton();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setTitle("MATERIAS");

        jLabel1.setText("Descripción");

        txtDescripcion.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtDescripcionFocusLost(evt);
            }
        });
        txtDescripcion.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtDescripcionKeyReleased(evt);
            }
        });

        jLabel2.setText("FILTROS");

        jTableMaterias.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "IDMATERIA", "DESCRIPCION"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTableMaterias);

        btnNuevo.setText("Nuevo");
        btnNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNuevoActionPerformed(evt);
            }
        });

        btnModificar.setText("Modificar");
        btnModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModificarActionPerformed(evt);
            }
        });

        btnEliminar.setText("Eliminar");
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });

        btnSalir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/EXIT_ (23).jpg"))); // NOI18N
        btnSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalirActionPerformed(evt);
            }
        });

        btnLimpiar.setText("Limpiar Filtros");
        btnLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpiarActionPerformed(evt);
            }
        });

        radioEliminados.setText("Eliminados");
        radioEliminados.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                radioEliminadosStateChanged(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 247, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(2, 2, 2)
                                .addComponent(btnEliminar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(btnNuevo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnModificar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(0, 11, Short.MAX_VALUE)
                                .addComponent(btnSalir, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(radioEliminados)
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(18, 18, 18)
                                .addComponent(txtDescripcion, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnLimpiar)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(34, 34, 34))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtDescripcion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnLimpiar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(radioEliminados)
                        .addGap(16, 16, 16)
                        .addComponent(btnNuevo)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnModificar)
                        .addGap(18, 18, 18)
                        .addComponent(btnEliminar))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(5, 5, 5)
                .addComponent(btnSalir, javax.swing.GroupLayout.DEFAULT_SIZE, 53, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalirActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_btnSalirActionPerformed

    private void txtDescripcionKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDescripcionKeyReleased
        // TODO add your handling code here:
        filtrar();
    }//GEN-LAST:event_txtDescripcionKeyReleased

    private void txtDescripcionFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDescripcionFocusLost
        // TODO add your handling code here:
        filtrar();
    }//GEN-LAST:event_txtDescripcionFocusLost

    private void btnNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNuevoActionPerformed
        // TODO add your handling code here:
        Frame f = JOptionPane.getFrameForComponent(this);
        JD_MateriaNueva dialogMateriaNueva = new JD_MateriaNueva(f, true, "0");
        dialogMateriaNueva.dispose();
        dialogMateriaNueva.setVisible(true);
        // Actualizamos el jTable
        llenarTablaMateriasInicioHibernate();
    }//GEN-LAST:event_btnNuevoActionPerformed

    private void btnModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModificarActionPerformed
        // TODO add your handling code here:
        // TODO add your handling code here:
        if (jTableMaterias.getRowCount() == 0) {
            JOptionPane.showMessageDialog(null, "No hay Materias");
        } else {
            if (jTableMaterias.getSelectedRow() != -1) {
                //devuelve el valor de la fila selecciona y la columna que es código departamento
                String idMateria = String.valueOf(jTableMaterias.getValueAt(jTableMaterias.getSelectedRow(), 0));
                Frame f = JOptionPane.getFrameForComponent(this);
                JD_MateriaNueva materiaNueva = new JD_MateriaNueva(f, true, idMateria);
                materiaNueva.setVisible(true);
            } else {
                JOptionPane.showMessageDialog(null, "No se ha seleccionado ninguna");
            }
        }
        llenarTablaMateriasInicioHibernate();
    }//GEN-LAST:event_btnModificarActionPerformed

    public boolean comprobarSiExisteHibernate(String filaSeleccionada) {
        boolean existe = false;
        System.out.println(filaSeleccionada);
        String sql = "FROM Blibros l WHERE l.bmaterias.idmateria = " + filaSeleccionada + "AND l.eliminado=0";
        Session sesion = JF_Menu.instanciaHibernate.openSession();
        Query consulta = sesion.createQuery(sql);
        Iterator iter = consulta.iterate();
        while (iter.hasNext()) {
            Blibros lib = (Blibros) iter.next();
            String nuevo = lib.getBmaterias().getDescmateria();
            if (!nuevo.equals("")) {
                existe = true;
            }
        }
        sesion.close();
        return existe;
    }
    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        if (radioEliminados.isSelected()) {
            eliminarHibernate(false, "restaurar");
        } else {
            eliminarHibernate(true, "eliminar");
        }
    }//GEN-LAST:event_btnEliminarActionPerformed

    private void btnLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpiarActionPerformed

        limpiarFiltros();
        llenarTablaMateriasInicioHibernate();
    }//GEN-LAST:event_btnLimpiarActionPerformed

    private void radioEliminadosStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_radioEliminadosStateChanged
        // TODO add your handling code here:
        if (radioEliminados.isSelected()) {
            btnEliminar.setText("Restaurar");
        } else {
            btnEliminar.setText("Eliminar");
        }
        filtrar();
    }//GEN-LAST:event_radioEliminadosStateChanged
    private void limpiarFiltros() {
        txtDescripcion.setText("");
    }

    public void eliminarHibernate(boolean eliminado, String texto) {
        if (jTableMaterias.getRowCount() == 0) {
            JOptionPane.showMessageDialog(null, "No hay materias");
        } else {

            if (jTableMaterias.getSelectedRow() != -1) {

                //devuelve el valor de la fila selecciona y la columna 0
                int fila = jTableMaterias.getSelectedRow();
                if (comprobarSiExisteHibernate(jTableMaterias.getValueAt(fila, 0).toString())) {
                    JOptionPane.showMessageDialog(null, "No se puede eliminar, ya hay un libro con esa materia");
                } else {
                    int opcion = JOptionPane.showConfirmDialog(null, "¿Desea " + texto + " el registro : " + jTableMaterias.getValueAt(fila, 1) + "?");
                    Session sesion = JF_Menu.instanciaHibernate.openSession();
                    if (opcion == JOptionPane.YES_OPTION) {
                        Transaction tx = sesion.beginTransaction();
                        Bmaterias mat = new Bmaterias();
                        mat = (Bmaterias) sesion.get(Bmaterias.class, Integer.parseInt(jTableMaterias.getValueAt(fila, 0).toString()));
                        mat.setEliminado(eliminado);
                        tx.commit();
                        System.out.println("Materia " + jTableMaterias.getValueAt(fila, 0) + " borrada");
                        tablaMaterias.removeRow(fila);
                        String texto1 = "";
                        if (texto.equals("eliminar")) {
                            texto1 = "eliminado";
                        } else {
                            texto1 = "restaurado";
                        }
                        JOptionPane.showMessageDialog(null, "Registro "+texto1);

                    }
                    sesion.close();

                }

            } else {
                JOptionPane.showMessageDialog(null, "No se ha seleccionado ninguna");
            }
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnLimpiar;
    private javax.swing.JButton btnModificar;
    private javax.swing.JButton btnNuevo;
    private javax.swing.JButton btnSalir;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTableMaterias;
    private javax.swing.JRadioButton radioEliminados;
    private javax.swing.JTextField txtDescripcion;
    // End of variables declaration//GEN-END:variables
}
