/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package formularios;

import conexion.HibernateUtil;
import funciones.MetodosComunes;
import java.util.Iterator;
import javax.swing.JOptionPane;
import modelo.Bmaterias;
import org.hibernate.Query;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;

/**
 *
 * @author Juan
 */
public class JD_MateriaNueva extends javax.swing.JDialog {

    //public SessionFactory instanciaHibernate = HibernateUtil.getSessionFactory();
    private String idMateria;
    private boolean esNuevo = false;
    private MetodosComunes funciones = new MetodosComunes();

    /**
     * Creates new form JD_MateriaNueva
     */
    public JD_MateriaNueva(java.awt.Frame parent, boolean modal, String idMateria) {
        super(parent, modal);
        this.idMateria = idMateria;
        if (this.idMateria.equals("0")) {
            esNuevo = true;
        }
        initComponents();
        rellenarCamposHibernate();
    }

    
    public void rellenarCamposHibernate(){
        if(!esNuevo){
            String sql = "FROM Bmaterias WHERE idMateria= "+idMateria;
            Session sesion = JF_Menu.instanciaHibernate.openSession();
            Query consulta = sesion.createQuery(sql);
            Iterator iter = consulta.iterate();
            Bmaterias mat = (Bmaterias)iter.next();
            txtDescripcion.setText(mat.getDescmateria());
            sesion.close();
            
        }
    }
    private boolean existe_materia_hibernate(String valor){
        boolean resultado = false;
        String sql = "FROM Bmaterias";
        Session sesion = JF_Menu.instanciaHibernate.openSession();
        Query consulta = sesion.createQuery(sql);
        Iterator iter = consulta.iterate();
        while(iter.hasNext()){
            Bmaterias mat = (Bmaterias)iter.next();
            if(mat.getDescmateria().equalsIgnoreCase(valor)){
                resultado = true;
            }
           // sesion.close();
        }
        return resultado;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        txtDescripcion = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtError = new javax.swing.JTextField();
        btnNuevo = new javax.swing.JButton();
        btnLimpiar = new javax.swing.JButton();
        btnSalir = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("NUEVA MATERIA");

        jLabel1.setText("Descripcion");

        txtDescripcion.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtDescripcionKeyTyped(evt);
            }
        });

        jLabel2.setText("MENSAJES:");

        txtError.setEditable(false);
        txtError.setForeground(new java.awt.Color(255, 0, 0));

        btnNuevo.setText("AÃ±adir");
        btnNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNuevoActionPerformed(evt);
            }
        });

        btnLimpiar.setText("Limpiar");
        btnLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpiarActionPerformed(evt);
            }
        });

        btnSalir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/EXIT_ (23).jpg"))); // NOI18N
        btnSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalirActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnNuevo)
                        .addGap(38, 38, 38)
                        .addComponent(btnLimpiar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 130, Short.MAX_VALUE)
                        .addComponent(btnSalir))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addComponent(txtError, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(txtDescripcion, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtDescripcion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(91, 91, 91)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtError, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnNuevo)
                        .addComponent(btnLimpiar))
                    .addComponent(btnSalir))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalirActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_btnSalirActionPerformed

    public void nuevo_hibernate(){
         // TODO add your handling code here:
        if (!isEmpty()) {
                if (!esNuevo) {
                    Session sesion = JF_Menu.instanciaHibernate.openSession();
                    Transaction transaccion = sesion.beginTransaction();
                    Bmaterias mat = (Bmaterias)sesion.load(Bmaterias.class,Integer.parseInt(idMateria));
                    mat.setDescmateria(txtDescripcion.getText());
                    sesion.update(mat);
                    transaccion.commit();
                    sesion.close();
                    JOptionPane.showMessageDialog(null, "Registro Actualizado");
                    this.dispose();

                } else {

                    if (!existe_materia_hibernate(txtDescripcion.getText())) {
                        SessionFactory instancia = HibernateUtil.getSessionFactory();
                        Session sesion = instancia.openSession();
                        Transaction tx = sesion.beginTransaction();
                        System.out.println("Inserto una fila en la tabla BMATERIAS");
                        Bmaterias mat = new Bmaterias();
                        Integer idMateria = maximo_hibernate("Bmaterias", "idmateria") + 1;
                         mat.setIdmateria(idMateria);
                         mat.setDescmateria(txtDescripcion.getText());
                         mat.setEliminado(false);
                        sesion.save(mat);
                        tx.commit();
                        sesion.close();
                        JOptionPane.showMessageDialog(null, "Registro creado");
                        this.dispose();

                    } else {
                        JOptionPane.showMessageDialog(null, "Ya existe la materia ");
                    }

                }
           
        } else {
            comprobarVacios();
        }
    }
    
    private void btnNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNuevoActionPerformed
       //nuevo();
        nuevo_hibernate();
    }//GEN-LAST:event_btnNuevoActionPerformed

    private void txtDescripcionKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDescripcionKeyTyped
        // TODO add your handling code here:
        funciones.limitarCaracteres(evt, "DESCRIPCION", 70, txtError, txtDescripcion);

            if (existe_materia_hibernate(txtDescripcion.getText())) {
                txtError.setText("DESCRIPCION: Ya existe una materia con esa DESCRIPCION");
            }
        
    }//GEN-LAST:event_txtDescripcionKeyTyped

    private void btnLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpiarActionPerformed
        // TODO add your handling code here:
        limpiar();
    }//GEN-LAST:event_btnLimpiarActionPerformed

    private Integer maximo_hibernate(String tabla,String id){
        String sql = "SELECT MAX(" +id+ ") FROM "+ tabla;
        Session sesion = JF_Menu.instanciaHibernate.openSession();
        Integer max= (Integer) sesion.createQuery(sql).uniqueResult();
       
        sesion.close();
        if(max==null){
            return 0;
        }else{
            return max;
        }
       
    }

    private boolean comprobarVacios() {
        boolean estanVacios = false;
        String texto = "ERROR:\n";
        if (txtDescripcion.getText().isEmpty()) {
            texto = texto + "Rellene el campo DESCRIPCION\n";
            estanVacios = true;
        }
        if (estanVacios) {
            JOptionPane.showMessageDialog(null, texto);
        }
        return estanVacios;

    }

    private boolean isEmpty() {
        if (txtDescripcion.getText().isEmpty()) {
            return true;
        } else {
            return false;
        }
    }

    private void limpiar() {
        txtDescripcion.setText("");
        txtError.setText("");
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnLimpiar;
    private javax.swing.JButton btnNuevo;
    private javax.swing.JButton btnSalir;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JTextField txtDescripcion;
    private javax.swing.JTextField txtError;
    // End of variables declaration//GEN-END:variables
}
