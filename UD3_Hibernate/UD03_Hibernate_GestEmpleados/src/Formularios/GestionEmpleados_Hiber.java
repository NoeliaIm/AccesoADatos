/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package Formularios;

import Conexion.HibernateUtil;
import Modelo.*;
import java.math.BigDecimal;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Iterator;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListCellRenderer;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import org.hibernate.Query;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;

/**
 *
 * @author Isabel
 */
public class GestionEmpleados_Hiber extends javax.swing.JFrame {

    public SessionFactory   instancia = HibernateUtil.getSessionFactory();
    public Empleados        e;
    public int              empActual = 0;
    public int              d;
    public Integer          emp_no;
    public String           apellido;
    public String           oficio;
    public short            dir;
    public java.sql.Date    fecha_alt;
    public BigDecimal       comision;    
    public Integer          dept_no;
    public BigDecimal       salario;

    /**
     * Creates new form Ud02_Act9_ConsultaEmpleados_Isabel
     */
    public GestionEmpleados_Hiber() {
        super("Consulta datos de Empleados");
        initComponents();
        LlenarDepartamentos();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        comboDepartamento = new javax.swing.JComboBox();
        txtEmp_no = new javax.swing.JTextField();
        txtApellidos = new javax.swing.JTextField();
        txtOficio = new javax.swing.JTextField();
        txtDir = new javax.swing.JTextField();
        txtSalario = new javax.swing.JTextField();
        txtComision = new javax.swing.JTextField();
        botonGrabar = new javax.swing.JButton();
        BotonPrimero = new javax.swing.JButton();
        botonAnterior = new javax.swing.JButton();
        botonSiguiente = new javax.swing.JButton();
        botonUltimo = new javax.swing.JButton();
        botonSalir = new javax.swing.JButton();
        botonNuevo = new javax.swing.JButton();
        jDateFecha_Alt = new com.toedter.calendar.JDateChooser();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Codigo Empleado");

        jLabel2.setText("Nombre");

        jLabel3.setText("Oficio");

        jLabel4.setText("Director");

        jLabel5.setText("Fecha Alta");

        jLabel6.setText("Salario");

        jLabel7.setText("Comision");

        jLabel8.setText("Departamento");

        comboDepartamento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboDepartamentoActionPerformed(evt);
            }
        });

        txtEmp_no.setName(""); // NOI18N
        txtEmp_no.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtEmp_noActionPerformed(evt);
            }
        });
        txtEmp_no.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtEmp_noFocusLost(evt);
            }
        });
        txtEmp_no.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtEmp_noKeyTyped(evt);
            }
        });

        txtApellidos.setEnabled(false);
        txtApellidos.setName("txtApellidos"); // NOI18N
        txtApellidos.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtApellidosKeyTyped(evt);
            }
        });

        txtOficio.setEnabled(false);
        txtOficio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtOficioActionPerformed(evt);
            }
        });
        txtOficio.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtOficioKeyTyped(evt);
            }
        });

        txtDir.setEnabled(false);
        txtDir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDirActionPerformed(evt);
            }
        });
        txtDir.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtDirFocusLost(evt);
            }
        });
        txtDir.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtDirKeyTyped(evt);
            }
        });

        txtSalario.setEnabled(false);
        txtSalario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSalarioActionPerformed(evt);
            }
        });
        txtSalario.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtSalarioFocusLost(evt);
            }
        });
        txtSalario.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtSalarioKeyTyped(evt);
            }
        });

        txtComision.setEnabled(false);
        txtComision.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtComisionActionPerformed(evt);
            }
        });
        txtComision.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtComisionFocusLost(evt);
            }
        });
        txtComision.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtComisionKeyTyped(evt);
            }
        });

        botonGrabar.setText("Grabar");
        botonGrabar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonGrabarActionPerformed(evt);
            }
        });

        BotonPrimero.setText("<<");
        BotonPrimero.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonPrimeroActionPerformed(evt);
            }
        });

        botonAnterior.setText("<");
        botonAnterior.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonAnteriorActionPerformed(evt);
            }
        });

        botonSiguiente.setText(">");
        botonSiguiente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonSiguienteActionPerformed(evt);
            }
        });

        botonUltimo.setText(">>");
        botonUltimo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonUltimoActionPerformed(evt);
            }
        });

        botonSalir.setText("Salir");
        botonSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonSalirActionPerformed(evt);
            }
        });

        botonNuevo.setText("Nuevo");
        botonNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonNuevoActionPerformed(evt);
            }
        });

        jDateFecha_Alt.setEnabled(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5)
                            .addComponent(jLabel6)
                            .addComponent(jLabel7)
                            .addComponent(jLabel8))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtSalario, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtComision, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtApellidos, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtOficio, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtDir, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtEmp_no, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(comboDepartamento, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jDateFecha_Alt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(60, 60, 60)
                                .addComponent(BotonPrimero)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(botonAnterior)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(botonSiguiente))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(52, 52, 52)
                                .addComponent(botonGrabar)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(botonNuevo)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(botonSalir)
                            .addComponent(botonUltimo))))
                .addContainerGap(83, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtEmp_no, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtApellidos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtOficio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtDir, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel5)
                    .addComponent(jDateFecha_Alt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(txtSalario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(txtComision, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel8)
                    .addComponent(comboDepartamento, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(BotonPrimero)
                    .addComponent(botonAnterior)
                    .addComponent(botonSiguiente)
                    .addComponent(botonUltimo))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 43, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(botonSalir)
                    .addComponent(botonGrabar)
                    .addComponent(botonNuevo))
                .addGap(34, 34, 34))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtSalarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSalarioActionPerformed
        try {
            Double n = Double.parseDouble(txtSalario.getText());
            if (!FloatCorrecto(txtSalario.getText())){
                JOptionPane.showMessageDialog(null, "Formato correcto : 7 dígitos -2 dec");
                txtSalario.requestFocus();
            }
            
            if (txtSalario.getText().length() == 0) {
                salario = new BigDecimal("0.0");
            } else {
                salario = new BigDecimal(txtSalario.getText());
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Formato correcto : 7 dígitos -2 dec");
            txtSalario.requestFocus();
        }
    }//GEN-LAST:event_txtSalarioActionPerformed

    private void botonAnteriorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonAnteriorActionPerformed
        try {

            if (txtEmp_no.getText().length() != 0) {
                Integer emp_no_ant = Integer.parseInt(txtEmp_no.getText());
                Session sesion = instancia.openSession();
                Query q = sesion.createQuery("from Empleados as e where e.empNo < ? order by e.empNo desc").setInteger(0, emp_no_ant);
                q.setFetchSize(1);
                Iterator iter = q.iterate();
                Empleados nuempt;
                if (!iter.hasNext()) {
                    JOptionPane.showMessageDialog(null, "Se ha llegado al primer Empleado ");
                } else {
                    // extraer el objeto
                    nuempt = (Empleados) iter.next();
                    ActivarCampos();
                    VisualizarCampos(nuempt);
                }
                sesion.close();
            }
        } catch (SQLException ex) {
            Logger.getLogger(GestionEmpleados_Hiber.class.getName()).log(Level.SEVERE, null, ex);
        }


    }//GEN-LAST:event_botonAnteriorActionPerformed

    private void botonUltimoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonUltimoActionPerformed

        try {
            Session sesion = instancia.openSession();
            Empleados nuempt = (Empleados) sesion.createQuery(
                    "from Empleados as e where e.empNo=  (select max(empNo) from Empleados) order by e.empNo").uniqueResult();
            if (nuempt != null) {
                d = nuempt.getEmpNo();
                ActivarCampos();
                VisualizarCampos(nuempt);
            }
            sesion.close();
        } catch (SQLException ex) {
            Logger.getLogger(GestionEmpleados_Hiber.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_botonUltimoActionPerformed

    private void botonNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonNuevoActionPerformed
        try {
            txtEmp_no.setText("");
            BorrarDatos();
            DesactivarCampos();
            comboDepartamento.setSelectedIndex(0);
            txtEmp_no.requestFocus();
        } catch (SQLException ex) {
            Logger.getLogger(GestionEmpleados_Hiber.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_botonNuevoActionPerformed

    private void comboDepartamentoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboDepartamentoActionPerformed
        String[] Seleccion = (String[]) comboDepartamento.getSelectedItem(); // Recoge lo seleccionado
        dept_no = Integer.parseInt(Seleccion[0]);
    }//GEN-LAST:event_comboDepartamentoActionPerformed

    private void BotonPrimeroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonPrimeroActionPerformed
        try {
            Session sesion = instancia.openSession();
            Empleados emp = (Empleados) sesion.createQuery(
                    "from Empleados as e where e.empNo= (select min(empNo) from Empleados) order by e.empNo")
                    .uniqueResult();
            if (emp != null) {
                ActivarCampos();
                VisualizarCampos(emp);
            } else {
                JOptionPane.showMessageDialog(null, "No hay registros");
            }
            sesion.close();
        } catch (SQLException ex) {
            Logger.getLogger(GestionEmpleados_Hiber.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_BotonPrimeroActionPerformed

    private void botonSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonSalirActionPerformed
        System.exit(0);
    }//GEN-LAST:event_botonSalirActionPerformed

    private void txtEmp_noFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtEmp_noFocusLost
        try {
            if (txtEmp_no.getText().isEmpty()) {
                txtEmp_no.requestFocus();
            } else {
                short vemp_no = (short) Integer.parseInt(txtEmp_no.getText());
                if (ExisteEmpleado(vemp_no)) {
                    Session sesion = instancia.openSession();
                    Integer emp_no_ant = Integer.parseInt(txtEmp_no.getText());
                    Empleados em = (Empleados) sesion.createQuery("from Empleados as de where de.empNo=?").setInteger(0, emp_no_ant).uniqueResult();
                    ActivarCampos();
                    VisualizarCampos(em);
                    sesion.close();
                } else {
                    ActivarCampos();
                    BorrarDatos();
                    txtApellidos.requestFocus();
                }
            }
        } catch (SQLException ex) {
            Logger.getLogger(GestionEmpleados_Hiber.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_txtEmp_noFocusLost

    private void txtEmp_noActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtEmp_noActionPerformed

        try {
            if (txtEmp_no.getText().isEmpty()) {
                txtEmp_no.requestFocus();
            } else {
                short vemp_no = (short) Integer.parseInt(txtEmp_no.getText());
                if (!ExisteEmpleado(vemp_no)) {
                    ActivarCampos();
                    BorrarDatos();
                    txtApellidos.requestFocus();
                } else {
                    Session sesion = instancia.openSession();
                    Empleados em = (Empleados) sesion.createQuery("from Empleados as de where de.empNo=?").setInteger(0, vemp_no).uniqueResult();
                    ActivarCampos();
                    VisualizarCampos(em);
                    sesion.close();
                }
            }
        } catch (SQLException ex) {
            Logger.getLogger(GestionEmpleados_Hiber.class.getName()).log(Level.SEVERE, null, ex);
        }                                   
    }//GEN-LAST:event_txtEmp_noActionPerformed

    private void botonGrabarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonGrabarActionPerformed

        Empleados e =new Empleados();

        java.util.Date fecha = jDateFecha_Alt.getDate();
        java.sql.Date fecha_alt = new java.sql.Date(fecha.getTime());
        e.setFechaAlt(fecha_alt);
        
        if (txtEmp_no.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "El código del empleado no puede estar vacío");
            txtEmp_no.requestFocus();
        } else {
            try {
                e.setEmpNo(Short.parseShort(txtEmp_no.getText()));
                if (txtApellidos.getText().isEmpty()) {
                    JOptionPane.showMessageDialog(null, "El nombre del empleado no puede estar vacío");
                    txtApellidos.requestFocus();
                } else {
                    e.setApellido(txtApellidos.getText());
                }
                e.setOficio(txtOficio.getText());
                if ("".equals(txtSalario.getText())) {
                    e.setSalario(BigDecimal.ZERO);
                } else {
                    e.setSalario(new BigDecimal(txtSalario.getText()));
                }
                if ("".equals(txtComision.getText())) {
                    e.setComision(BigDecimal.ZERO);
                } else {
                    e.setComision(new BigDecimal(txtComision.getText()));
                }
                short vdir = 0;
                if ("".equals(txtDir.getText())) {
                    vdir = 0;
                } else {
                    vdir = Short.parseShort(txtDir.getText());
                }
                e.setDir(vdir);
                Departamentos d = new Departamentos();
                d.setDeptNo(dept_no.byteValue());
                e.setDepartamentos(d);
                if (!ExisteEmpleado(vdir)) {
                    JOptionPane.showMessageDialog(null, "No existe el director como empleado ");
                    txtDir.requestFocus();
                } else {
                    Session sesion = instancia.openSession();
                    Transaction transaccion = sesion.beginTransaction();
                    short emp_no_ant = e.getEmpNo();
                    Empleados em1 = (Empleados) sesion.get(Empleados.class, (short) emp_no_ant);
                    if (em1 == null) {
                        sesion.save(e);
                    } else {
                        em1.setApellido(e.getApellido());
                        em1.setComision(e.getComision());
                        em1.setDepartamentos(e.getDepartamentos());
                        em1.setDir(e.getDir());
                        em1.setFechaAlt(e.getFechaAlt());
                        em1.setOficio(e.getOficio());
                        em1.setSalario(e.getSalario());
                        sesion.update(em1);
                    }
                    int respuesta = JOptionPane.showConfirmDialog(null, "Desea actualizar el Cliente?");
                    if (respuesta == JOptionPane.YES_OPTION) {
                        transaccion.commit();
                    } else {
                        transaccion.rollback();
                    }

                    DesactivarCampos();
                    txtEmp_no.setText("");
                    BorrarDatos();
                    sesion.close();
                    txtEmp_no.requestFocus();
                }
            } catch (SQLException ex) {
                Logger.getLogger(GestionEmpleados_Hiber.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

    }//GEN-LAST:event_botonGrabarActionPerformed

    private void txtDirFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDirFocusLost
        try {
            dir = (short) Integer.parseInt(txtDir.getText());
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "El director debe ser numérico ");
            txtDir.setText("");
            txtDir.requestFocus();
        }
    }//GEN-LAST:event_txtDirFocusLost

    private void txtDirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDirActionPerformed
        try {
            dir = (short) Integer.parseInt(txtDir.getText());
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "El director debe ser numérico ");
            txtDir.setText("");
            txtDir.requestFocus();
        }


    }//GEN-LAST:event_txtDirActionPerformed

    private void txtSalarioFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtSalarioFocusLost
        try {
            Double n = Double.parseDouble(txtSalario.getText());
            if (txtSalario.getText().length() == 0) {
                salario = new BigDecimal("0.0");
            } else {
                    salario = new BigDecimal(txtSalario.getText());
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Formato : 7 dígitos -2 dec");
            txtSalario.setText("");
            txtSalario.requestFocus();
        }

    }//GEN-LAST:event_txtSalarioFocusLost

    private void txtComisionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtComisionActionPerformed


        if (txtComision.getText().length()==0) {
            comision = new BigDecimal("0.0");
        } else {
            try {
                comision = new BigDecimal(txtComision.getText());

            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "Formato: 4 enteros y 2 decimales");
                txtComision.setText("");
                txtComision.requestFocus();
            }
        }
    }//GEN-LAST:event_txtComisionActionPerformed

    private void txtComisionFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtComisionFocusLost

        if (txtComision.getText().length()==0) {
            comision=new BigDecimal("0.0");
        } else {
            try {
                comision = new BigDecimal(txtComision.getText());

            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "Formato: 4 enteros y 2 decimales");
                txtComision.setText("");
                txtComision.requestFocus();
            }
        }
    }//GEN-LAST:event_txtComisionFocusLost

    private void botonSiguienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonSiguienteActionPerformed
        try {
            if (txtEmp_no.getText().length() != 0) {
            short  emp_no_ant = (short) Integer.parseInt(txtEmp_no.getText());
            Session sesion = instancia.openSession();
            Query q = sesion.createQuery(
                    "from Empleados as e where e.empNo > ? order by e.empNo asc ").setShort(0, emp_no_ant);
            q.setFetchSize(1);
            Iterator iter = q.iterate();
            Empleados nuempt;
            if (iter.hasNext()) {
                // extraer el objeto
                nuempt = (Empleados) iter.next();
                d = nuempt.getEmpNo();
                ActivarCampos();
                VisualizarCampos(nuempt);
            } else {
                JOptionPane.showMessageDialog(null, " NO HAY MAS EMPLEADOS...");
            }
            sesion.close();
            }
        } catch (SQLException ex) {
            Logger.getLogger(GestionEmpleados_Hiber.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_botonSiguienteActionPerformed

    private void txtEmp_noKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtEmp_noKeyTyped
        if(!Character.isDigit(evt.getKeyChar())) {
            evt.consume();
        } 
        if (txtEmp_no.getText().length() == 4) {
            evt.consume();
        }
    }//GEN-LAST:event_txtEmp_noKeyTyped

    private void txtApellidosKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtApellidosKeyTyped
        // TODO add your handling code here:
        
        if (txtApellidos.getText().length() == 80) {
            evt.consume();
        }
        if(Character.isDigit(evt.getKeyChar())) {
            evt.consume();
        }
        
    }//GEN-LAST:event_txtApellidosKeyTyped

    private void txtOficioKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtOficioKeyTyped
    if(Character.isDigit(evt.getKeyChar())) {
            evt.consume();
        }
        if (txtOficio.getText().length() == 40) {
            evt.consume();
        }       
        
    }//GEN-LAST:event_txtOficioKeyTyped

    private void txtDirKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDirKeyTyped

        if(!Character.isDigit(evt.getKeyChar())) {
            evt.consume();
        }
    
        if (txtDir.getText().length() == 4) {
            evt.consume();
        }       
    }//GEN-LAST:event_txtDirKeyTyped

    private void txtSalarioKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSalarioKeyTyped

        if (txtSalario.getText().length() == 7) {
            evt.consume();
        }
        char c=evt.getKeyChar();
        if (!(Character.isDigit(c)||c=='.'||c==',')){
            evt.consume();
        }

    }//GEN-LAST:event_txtSalarioKeyTyped

    private void txtComisionKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtComisionKeyTyped
        // TODO add your handling code here:

        if (txtComision.getText().length() == 7) {
            evt.consume();
        }

        char c=evt.getKeyChar();
        if (!(Character.isDigit(c)||c=='.'||c==',')){
            evt.consume();
        }

    }//GEN-LAST:event_txtComisionKeyTyped

    private void txtOficioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtOficioActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtOficioActionPerformed

    /**
     * @param args the command line arguments
     */
    public boolean EnteroCorrecto(String numero) {

        if (numero.matches("[0-9]*")) {
            return true;
        } else {
            return false;
        }
    }

    public boolean FloatCorrecto(String numero) {
        if (numero.matches("[0-9]{1-4}\\,{1}[0-9]{1-2}")) {
            return true;
        }
        else {
            return false;
        }

    }

    public boolean FechaCorrecta(String fecha) {

        if (fecha == null) {
            return false;
        }

        SimpleDateFormat dateFormat = new SimpleDateFormat("dd-mm-yyyy");

        if (fecha.trim().length() != dateFormat.toPattern().length()) {
            return false;
        }
        dateFormat.setLenient(false);  //Desactiva el modo permisivo

        try {
            dateFormat.parse(fecha.trim());
        } catch (ParseException pe) {
            return false;
        }
        return true;
    }

    private boolean ExisteEmpleado(short Emp_no) {
        Session sesion = instancia.openSession();
        boolean existe;
        Empleados emple = (Empleados) sesion.createQuery("from Empleados as e where e.empNo = ? ")
                        .setInteger(0, Emp_no).uniqueResult();

        if (emple == null) {
            existe =false;
        } else {
            existe=true;
        }
        sesion.close();
        return existe;
    }

    private void BorrarDatos() throws SQLException {

        txtApellidos.setText("");
        txtOficio.setText("");
        txtDir.setText("");
        jDateFecha_Alt.setDate(null);
        txtSalario.setText("");
        txtComision.setText("");
        comboDepartamento.setSelectedIndex(0);
    }

    private void VisualizarCampos(Empleados e) throws SQLException {
        txtEmp_no.setText(Short.toString(e.getEmpNo()));
        if (e.getApellido() == null) {
            txtApellidos.setText("");
        } else {
            txtApellidos.setText(e.getApellido());
        }
        if (e.getOficio() == null) {
            txtOficio.setText("");
        } else {
            txtOficio.setText(e.getOficio());
        }
        if (e.getOficio() == null) {
            txtOficio.setText("");
        } else {
            txtOficio.setText(e.getOficio());
        }
        if (e.getDir() == null) {
            txtDir.setText("");
        } else {
            txtDir.setText(Integer.toString(e.getDir()));
        }
        if (e.getFechaAlt() == null) {
            jDateFecha_Alt.setDate(null);
        } else {
            jDateFecha_Alt.setDate(e.getFechaAlt());
        }
        if (e.getSalario() == null) {
            txtSalario.setText("");
        } else {
            txtSalario.setText(e.getSalario().toString());
        }
        if (e.getComision() == null) {
            txtComision.setText("");
        } else {
            txtComision.setText(e.getComision().toString());
        }
        int vdept_no = e.getDepartamentos().getDeptNo();

        VisualizarDepartamento(vdept_no);

    }

    private void VisualizarDepartamento(Integer dept_no) throws SQLException {
        String[] seleccionado = null;
        int i = 0;
        boolean fin = false;
        while (i < comboDepartamento.getItemCount() && !fin) {
            seleccionado = (String[]) comboDepartamento.getItemAt(i);
            if (seleccionado[0].equals(Integer.toString(dept_no))) {
                comboDepartamento.setSelectedIndex(i);
                fin = true;
            }
            i++;
        }


    }

    private void ActivarCampos() {
        txtApellidos.setEnabled(true);
        txtSalario.setEnabled(true);
        txtOficio.setEnabled(true);
        txtDir.setEnabled(true);
        jDateFecha_Alt.setEnabled(true);
        txtSalario.setEnabled(true);
        txtComision.setEnabled(true);
    }

    ;
    private void DesactivarCampos() {
        txtApellidos.setEnabled(false);
        txtSalario.setEnabled(false);
        txtOficio.setEnabled(false);
        txtDir.setEnabled(false);
        jDateFecha_Alt.setEnabled(false);
        txtSalario.setEnabled(false);
        txtComision.setEnabled(false);
    }

    ;
    private void LlenarDepartamentos() {


        String datos[] = new String[2];

        comboDepartamento.removeAllItems(); //Borra todos los Items
        Session sesion = instancia.openSession();
        Query consulta = sesion.createQuery("FROM Departamentos d ORDER BY d.dnombre");
        comboDepartamento.addItem(new String[]{"-1", "Seleccion Departamento...",}); //Los añade al Combo con dos columnas
        Iterator iter = consulta.iterate();
        while (iter.hasNext()) {
            Departamentos dep = (Departamentos) iter.next();
            datos[0] = Integer.toString(dep.getDeptNo()); // Almacena el código del departamento
            datos[1] = dep.getDnombre();  //Almacena el nombre
            comboDepartamento.addItem(new String[]{datos[0], datos[1],}); //Los añade al Combo con dos columnas
        }

        comboDepartamento.setRenderer(new DefaultListCellRenderer() //Renderiza el Combo 
        {
            @Override
            public java.awt.Component getListCellRendererComponent(
                    JList l, Object o, int i, boolean s, boolean f) {
                return new JLabel(((String[]) o)[1]);  //Visualiza sólo la columna 1, que es el nombre
            }
        });
        sesion.close();

    }

    public static void main(String args[]) {

        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GestionEmpleados_Hiber.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GestionEmpleados_Hiber().setVisible(true);
            }
        });

    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BotonPrimero;
    private javax.swing.JButton botonAnterior;
    private javax.swing.JButton botonGrabar;
    private javax.swing.JButton botonNuevo;
    private javax.swing.JButton botonSalir;
    private javax.swing.JButton botonSiguiente;
    private javax.swing.JButton botonUltimo;
    private javax.swing.JComboBox comboDepartamento;
    private com.toedter.calendar.JDateChooser jDateFecha_Alt;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JTextField txtApellidos;
    private javax.swing.JTextField txtComision;
    private javax.swing.JTextField txtDir;
    private javax.swing.JTextField txtEmp_no;
    private javax.swing.JTextField txtOficio;
    private javax.swing.JTextField txtSalario;
    // End of variables declaration//GEN-END:variables
}
