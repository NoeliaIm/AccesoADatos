package Formularios;

import com.toedter.calendar.JDateChooser;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListCellRenderer;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JOptionPane;

/**
 *
 * @author Isabel
 */
public class ConsultaEmpleados extends javax.swing.JFrame {

    public Integer emp_no;
    public String apellido;
    public String oficio;
    public Integer dir;
    public java.sql.Date fecha_alt;
    public float salario;
    public float comision;
    public Integer dept_no;
    public Integer filas;
    static private ConsultaEmpleados instancia = null;
    public ResultSet resultado;
    public boolean existeEmpleado;

    private ConsultaEmpleados() throws SQLException {
        super("Consulta datos de Empleados");
        initComponents();
        LlenarDepartamentos();
    }

    public static ConsultaEmpleados getInstancia() throws SQLException {

        if (instancia == null) {
            instancia = new ConsultaEmpleados();
        }
        instancia.DesactivarCampos();
        instancia.BorrarTodosDatos();
        return instancia;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        comboDepartamento = new javax.swing.JComboBox();
        txtEmp_no = new javax.swing.JTextField();
        txtApellidos = new javax.swing.JTextField();
        txtOficio = new javax.swing.JTextField();
        txtDir = new javax.swing.JTextField();
        txtSalario = new javax.swing.JTextField();
        txtComision = new javax.swing.JTextField();
        botonGrabar = new javax.swing.JButton();
        BotonPrimero = new javax.swing.JButton();
        botonAnterior = new javax.swing.JButton();
        botonSiguiente = new javax.swing.JButton();
        botonUltimo = new javax.swing.JButton();
        botonSalir = new javax.swing.JButton();
        botonNuevo = new javax.swing.JButton();
        jDateFecha_Alt = new com.toedter.calendar.JDateChooser();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("ACTUALIZAR EMPLEADOS");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        jLabel1.setText("Codigo Empleado");

        jLabel2.setText("Nombre");

        jLabel3.setText("Oficio");

        jLabel4.setText("Director");

        jLabel5.setText("Fecha Alta");

        jLabel6.setText("Salario");

        jLabel7.setText("Comision");

        jLabel8.setText("Departamento");

        comboDepartamento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboDepartamentoActionPerformed(evt);
            }
        });

        txtEmp_no.setName(""); // NOI18N
        txtEmp_no.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtEmp_noActionPerformed(evt);
            }
        });
        txtEmp_no.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtEmp_noFocusLost(evt);
            }
        });
        txtEmp_no.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtEmp_noKeyTyped(evt);
            }
        });

        txtApellidos.setEnabled(false);
        txtApellidos.setName("txtApellidos"); // NOI18N
        txtApellidos.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtApellidosKeyTyped(evt);
            }
        });

        txtOficio.setEnabled(false);
        txtOficio.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtOficioKeyTyped(evt);
            }
        });

        txtDir.setEnabled(false);
        txtDir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDirActionPerformed(evt);
            }
        });
        txtDir.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtDirFocusLost(evt);
            }
        });
        txtDir.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtDirKeyTyped(evt);
            }
        });

        txtSalario.setEnabled(false);
        txtSalario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSalarioActionPerformed(evt);
            }
        });
        txtSalario.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtSalarioFocusLost(evt);
            }
        });
        txtSalario.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtSalarioKeyTyped(evt);
            }
        });

        txtComision.setEnabled(false);
        txtComision.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtComisionActionPerformed(evt);
            }
        });
        txtComision.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtComisionFocusLost(evt);
            }
        });
        txtComision.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtComisionKeyTyped(evt);
            }
        });

        botonGrabar.setText("Grabar");
        botonGrabar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonGrabarActionPerformed(evt);
            }
        });

        BotonPrimero.setText("<<");
        BotonPrimero.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonPrimeroActionPerformed(evt);
            }
        });

        botonAnterior.setText("<");
        botonAnterior.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonAnteriorActionPerformed(evt);
            }
        });

        botonSiguiente.setText(">");
        botonSiguiente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonSiguienteActionPerformed(evt);
            }
        });

        botonUltimo.setText(">>");
        botonUltimo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonUltimoActionPerformed(evt);
            }
        });

        botonSalir.setText("Salir");
        botonSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonSalirActionPerformed(evt);
            }
        });

        botonNuevo.setText("Nuevo");
        botonNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonNuevoActionPerformed(evt);
            }
        });

        jDateFecha_Alt.setEnabled(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5)
                            .addComponent(jLabel6)
                            .addComponent(jLabel7)
                            .addComponent(jLabel8))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtSalario, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtComision, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtOficio, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtDir, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtEmp_no, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jDateFecha_Alt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(comboDepartamento, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtApellidos, javax.swing.GroupLayout.PREFERRED_SIZE, 227, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(60, 60, 60)
                                .addComponent(BotonPrimero)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(botonAnterior)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(botonSiguiente))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(52, 52, 52)
                                .addComponent(botonGrabar)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(botonNuevo)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(botonSalir)
                            .addComponent(botonUltimo))))
                .addContainerGap(64, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtEmp_no, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtApellidos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtOficio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtDir, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel5)
                    .addComponent(jDateFecha_Alt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(txtSalario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(txtComision, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel8)
                    .addComponent(comboDepartamento, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(BotonPrimero)
                    .addComponent(botonAnterior)
                    .addComponent(botonSiguiente)
                    .addComponent(botonUltimo))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 43, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(botonSalir)
                    .addComponent(botonGrabar)
                    .addComponent(botonNuevo))
                .addGap(34, 34, 34))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtSalarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSalarioActionPerformed
        if (txtSalario.getText().isEmpty()) {
            salario = 0;
        } else {
            try {
                salario = Float.parseFloat(txtSalario.getText());
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "El salario debe ser numérico ");
                txtSalario.setText("");
                txtSalario.requestFocus();
            }
        }
    }//GEN-LAST:event_txtSalarioActionPerformed

    private void botonAnteriorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonAnteriorActionPerformed
        try {
            if (txtEmp_no.getText().length() != 0) {
                Integer emp_no_ant = Integer.parseInt(txtEmp_no.getText());
                String sql = "SELECT * FROM (SELECT * FROM EMPLEADOS WHERE EMP_NO<" + emp_no_ant
                        + " ORDER BY EMP_NO DESC) where rownum=1";
                try (Statement consulta = ConexionSingleton.conexion.createStatement()) {
                    resultado = consulta.executeQuery(sql);
                    if (resultado.next()) {
                        ActivarCampos();
                        VisualizarCampos();
                    } else {
                        JOptionPane.showMessageDialog(null, "Se ha llegado al inicio ");
                    }
                }
                resultado.close();
            }
        } catch (SQLException ex) {
            Logger.getLogger(ConsultaEmpleados.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_botonAnteriorActionPerformed

    private void botonUltimoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonUltimoActionPerformed

        try {
            String sql = "SELECT * FROM (SELECT * FROM EMPLEADOS ORDER BY EMP_NO DESC) WHERE ROWNUM=1";
            try (Statement consulta = ConexionSingleton.conexion.createStatement()) {
                resultado = consulta.executeQuery(sql);
                if (resultado.next()) {
                    ActivarCampos();
                    VisualizarCampos();
                }
            }
            resultado.close();;

        } catch (SQLException ex) {
            Logger.getLogger(ConsultaEmpleados.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_botonUltimoActionPerformed

    private void botonNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonNuevoActionPerformed
        try {
            BorrarTodosDatos();
            DesactivarCampos();
            comboDepartamento.setSelectedIndex(0);
            txtEmp_no.requestFocus();;
        } catch (SQLException ex) {
            Logger.getLogger(ConsultaEmpleados.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_botonNuevoActionPerformed

    private void comboDepartamentoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboDepartamentoActionPerformed
        String[] Seleccion = (String[]) comboDepartamento.getSelectedItem(); // Recoge lo seleccionado
        dept_no = Integer.parseInt(Seleccion[0]);
    }//GEN-LAST:event_comboDepartamentoActionPerformed

    private void BotonPrimeroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonPrimeroActionPerformed

        try {
            String sql = "SELECT * FROM (SELECT * FROM EMPLEADOS ORDER BY EMP_NO) WHERE ROWNUM=1";
            try (Statement consulta = ConexionSingleton.conexion.createStatement()) {
                resultado = consulta.executeQuery(sql);
                if (resultado.next()) {
                    ActivarCampos();
                    VisualizarCampos();
                }
            }
            resultado.close();;

        } catch (SQLException ex) {
            Logger.getLogger(ConsultaEmpleados.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_BotonPrimeroActionPerformed

    private void botonSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonSalirActionPerformed
        this.setVisible(false);
        this.dispose();
    }//GEN-LAST:event_botonSalirActionPerformed

    private void txtEmp_noFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtEmp_noFocusLost
        try {
            if (txtEmp_no.getText().isEmpty()) {
                txtEmp_no.requestFocus();
            } else {
                Integer emp_no = Integer.parseInt(txtEmp_no.getText());
                existeEmpleado = ExisteEmpleado(emp_no);
                if (existeEmpleado) {
                    String sql = "SELECT * FROM EMPLEADOS WHERE EMP_NO=?";
                    PreparedStatement consulta = ConexionSingleton.conexion.prepareStatement(sql);
                    consulta.setInt(1, emp_no);
                    resultado = consulta.executeQuery();
                    resultado.next();
                    ActivarCampos();
                    VisualizarCampos();
                    consulta.close();
                    resultado.close();;

                } else {
                    ActivarCampos();
                    BorrarDatos();
                    txtApellidos.requestFocus();
                }
            }
        } catch (SQLException ex) {
            Logger.getLogger(ConsultaEmpleados.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_txtEmp_noFocusLost

    private void txtEmp_noActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtEmp_noActionPerformed
        try {
            if (txtEmp_no.getText().isEmpty()) {
                txtEmp_no.requestFocus();
            } else {
                Integer emp_no = Integer.parseInt(txtEmp_no.getText());
                existeEmpleado = ExisteEmpleado(emp_no);
                if (existeEmpleado) {
                    /*String sql = "SELECT * FROM EMPLEADOS WHERE EMP_NO=?";
                     try (PreparedStatement consulta = ConexionSingleton.conexion.prepareStatement(sql)) {
                     consulta.setInt(1, emp_no);
                     resultado = consulta.executeQuery();
                     resultado.next();
                      
                     }
                     resultado.close();*/
                    ActivarCampos();
                    VisualizarCampos();
                    
                } else {
                    ActivarCampos();
                    BorrarDatos();
                }
                txtApellidos.requestFocus();
            }
        } catch (SQLException ex) {
            Logger.getLogger(ConsultaEmpleados.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_txtEmp_noActionPerformed

    private void botonGrabarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonGrabarActionPerformed
        String mensaje = "";
        try {
            if (jDateFecha_Alt.getDate() != null) {
                fecha_alt = new java.sql.Date(jDateFecha_Alt.getDate().getTime());
            } else {
                fecha_alt = null;
            }
            if (txtEmp_no.getText().isEmpty()) {
                mensaje = mensaje + "El código del empleado no puede estar vacío\n";
            }
            emp_no = Integer.parseInt(txtEmp_no.getText());
            if (txtApellidos.getText().isEmpty()) {
                mensaje = mensaje + "El nombre del empleado no puede estar vacío\n";
            } else {
                apellido = txtApellidos.getText();
            }
            oficio = txtOficio.getText();
            if ("".equals(txtSalario.getText())) {
                salario = 0;
            } else {
                salario = Float.parseFloat(txtSalario.getText());
            }
            if ("".equals(txtComision.getText())) {
                comision = 0;
            } else {
                comision = Float.parseFloat(txtComision.getText());
            }
            if ("".equals(txtDir.getText())) {
                mensaje = mensaje + "El director no puesde estar vacío\n";
            } else {
                dir = Integer.parseInt(txtDir.getText());
                if (!ExisteEmpleado(dir)) {
                    mensaje = mensaje + "No existe eese director como empleado\n";
                }
            }

            if (dept_no == -1) {
                mensaje = mensaje + "Debe seleccionar un departamento\n";
            }
            if (mensaje != null) {
                JOptionPane.showMessageDialog(null, mensaje);
                txtEmp_no.requestFocus();
            } else {
                String sql = null;
                if (existeEmpleado) {
                    actualizar();
                } else {
                    insertar();
                }
                if (filas == 0) {
                    JOptionPane.showMessageDialog(null, "Error al grabar el registro ");
                } else {
                    JOptionPane.showMessageDialog(null, "Registro Grabado ");
                }
                DesactivarCampos();
                BorrarTodosDatos();
                txtEmp_no.requestFocus();
            }
        } catch (SQLException ex) {
            Logger.getLogger(ConsultaEmpleados.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_botonGrabarActionPerformed
    private void insertar() throws SQLException {
        String sql = "INSERT INTO EMPLEADOS VALUES(?,?,?,?,?,?,?,?)";
        setDatosEmpleado(sql);
    }

    private void actualizar() throws SQLException {

        String sql = "UPDATE EMPLEADOS SET EMP_NO=?,APELLIDO=?,OFICIO=?,"
                + "DIR=?,FECHA_ALT=?,SALARIO=?,COMISION=?,DEPT_NO=?"
                + "WHERE EMP_NO=?";
        setDatosEmpleadoUpdate(sql);
    }

    private void setDatosEmpleadoUpdate(String sql) throws SQLException {
        PreparedStatement consulta;
        consulta = ConexionSingleton.conexion.prepareStatement(sql);
        consulta.setInt(1, emp_no);
        consulta.setString(2, apellido);
        consulta.setString(3, oficio);
        consulta.setInt(4, dir);
        consulta.setDate(5, fecha_alt);
        consulta.setFloat(6, salario);
        consulta.setFloat(7, comision);
        consulta.setInt(8, dept_no);
        consulta.setInt(9, emp_no);
        filas = consulta.executeUpdate();
    }

    private void setDatosEmpleado(String sql) throws SQLException {
        PreparedStatement consulta;
        consulta = ConexionSingleton.conexion.prepareStatement(sql);
        consulta.setInt(1, emp_no);
        consulta.setString(2, apellido);
        consulta.setString(3, oficio);
        consulta.setInt(4, dir);
        consulta.setDate(5, fecha_alt);
        consulta.setFloat(6, salario);
        consulta.setFloat(7, comision);
        consulta.setInt(8, dept_no);
        filas = consulta.executeUpdate();
    }
    private void txtDirFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDirFocusLost
        try {
            dir = Integer.parseInt(txtDir.getText());
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "El director debe ser numérico ");
            txtDir.setText("");
            txtDir.requestFocus();
        }
    }//GEN-LAST:event_txtDirFocusLost

    private void txtDirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDirActionPerformed
        try {
            dir = Integer.parseInt(txtDir.getText());
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "El director debe ser numérico ");
            txtDir.setText("");
            txtDir.requestFocus();
        }

    }//GEN-LAST:event_txtDirActionPerformed

    private void txtSalarioFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtSalarioFocusLost
        if ("".equals(txtSalario.getText())) {
            salario = 0;
        } else {
            try {
                salario = Float.parseFloat(txtSalario.getText());
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "El salario debe ser numérico ");
                txtSalario.setText("");
                txtSalario.requestFocus();
            }
        }
    }//GEN-LAST:event_txtSalarioFocusLost

    private void txtComisionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtComisionActionPerformed


        if (txtComision.getText().isEmpty()) {
            comision = 0;
        } else {
            try {
                comision = Float.parseFloat(txtComision.getText());
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "La comisión debe ser numérica ");
                txtComision.setText("");
                txtComision.requestFocus();
            }
        }
    }//GEN-LAST:event_txtComisionActionPerformed

    private void txtComisionFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtComisionFocusLost

        if ("".equals(txtComision.getText())) {
            comision = 0;
        } else {
            try {
                comision = Float.parseFloat(txtComision.getText());
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "La comisión debe ser numérica ");
                txtComision.setText("");
                txtComision.requestFocus();
            }
        }
    }//GEN-LAST:event_txtComisionFocusLost

    private void botonSiguienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonSiguienteActionPerformed
        try {
            if (txtEmp_no.getText().length() != 0) {
                Integer emp_no_ant = Integer.parseInt(txtEmp_no.getText());
                String sql = "SELECT * FROM (SELECT * FROM EMPLEADOS WHERE EMP_NO>" + emp_no_ant
                        + " ORDER BY EMP_NO) where rownum=1";
                try (PreparedStatement consulta = ConexionSingleton.conexion.prepareStatement(sql)) {
                    resultado = consulta.executeQuery();
                    if (resultado.next()) {
                        ActivarCampos();
                        VisualizarCampos();
                    } else {
                        JOptionPane.showMessageDialog(null, "Se ha llegado al inicio ");
                    }
                }
                resultado.close();;





            }
        } catch (SQLException ex) {
            Logger.getLogger(ConsultaEmpleados.class
                    .getName()).log(Level.SEVERE, null, ex);
        }


    }//GEN-LAST:event_botonSiguienteActionPerformed

    private void txtEmp_noKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtEmp_noKeyTyped

        if (txtEmp_no.getText().length() == 4) {
            evt.consume();
        }
        if (!Character.isDigit(evt.getKeyChar())) {
            evt.consume();
        }
    }//GEN-LAST:event_txtEmp_noKeyTyped

    private void txtApellidosKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtApellidosKeyTyped

        if (txtApellidos.getText().length() == 50) {
            evt.consume();
        }
        if (!Character.isAlphabetic(evt.getKeyChar())) {
            evt.consume();
        }
    }//GEN-LAST:event_txtApellidosKeyTyped

    private void txtOficioKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtOficioKeyTyped

        if (txtOficio.getText().length() == 10) {
            evt.consume();
        }
        if (!Character.isAlphabetic(evt.getKeyChar())) {
            evt.consume();
        }
    }//GEN-LAST:event_txtOficioKeyTyped

    private void txtDirKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDirKeyTyped
        if (txtDir.getText().length() == 5) {
            evt.consume();
        }
        if (!Character.isDigit(evt.getKeyChar())) {
            evt.consume();
        }
    }//GEN-LAST:event_txtDirKeyTyped

    private void txtSalarioKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSalarioKeyTyped
        if (txtSalario.getText().length() == 7) {
            evt.consume();
        }
        if (!(Character.isDigit(evt.getKeyChar()) || (evt.getKeyChar() == '.'))) {
            evt.consume();
        }
    }//GEN-LAST:event_txtSalarioKeyTyped

    private void txtComisionKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtComisionKeyTyped

        if (txtComision.getText().length() == 7) {
            evt.consume();
        }
        if (!(Character.isDigit(evt.getKeyChar()) || (evt.getKeyChar() == '.'))) {
            evt.consume();
        }
    }//GEN-LAST:event_txtComisionKeyTyped

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
    }//GEN-LAST:event_formWindowClosed

    /**
     * @param args the command line arguments
     */
    public String sacarFechaJDataChooser(JDateChooser jdcFecha) {
        String fecha = "";
        String ano = jdcFecha.getCalendar().get(Calendar.YEAR) + "";
        String mes = jdcFecha.getCalendar().get(Calendar.MONTH) + 1 + "";
        String dia = jdcFecha.getCalendar().get(Calendar.DAY_OF_MONTH) + "";
        if (ano.length() < 2) {
            ano = "000" + ano;
        } else if (ano.length() < 3) {
            ano = "00" + ano;
        } else if (ano.length() < 4) {
            ano = "0" + ano;
        }

        if (mes.length() < 2) {
            mes = "0" + mes;
        }

        if (dia.length() < 2) {
            dia = "0" + dia;
        }

        fecha = ano + mes + dia;
        return fecha;
    }

    public boolean EnteroCorrecto(String numero) {

        if (txtEmp_no.getText().matches("[0-9]*")) {
            return true;
        } else {
            return false;
        }
    }

    public boolean FloatCorrecto(String numero) {

        return true;
    }

    public boolean FechaCorrecta(String fecha) {

        if (fecha == null) {
            return false;
        }

        SimpleDateFormat dateFormat = new SimpleDateFormat("dd-mm-yyyy");

        if (fecha.trim().length() != dateFormat.toPattern().length()) {
            return false;
        }
        dateFormat.setLenient(false);  //Desactiva el modo permisivo

        try {
            dateFormat.parse(fecha.trim());
        } catch (ParseException pe) {
            return false;
        }
        return true;
    }

    @SuppressWarnings("empty-statement")
    private boolean ExisteEmpleado(Integer Emp_no) throws SQLException {

        String sql = "SELECT * FROM EMPLEADOS WHERE EMP_NO =?";
        PreparedStatement consulta = ConexionSingleton.conexion.prepareStatement(sql);
        consulta.setInt(1, Emp_no);
        resultado = consulta.executeQuery();
        if (resultado.next()) {
            return true;
        } else {
            return false;
        }

    }

    private void BorrarDatos() throws SQLException {
        txtApellidos.setText("");
        txtOficio.setText("");
        txtDir.setText("");
        jDateFecha_Alt.setDate(null);
        txtSalario.setText("");
        txtComision.setText("");
        comboDepartamento.setSelectedIndex(0);
    }

    private void BorrarTodosDatos() throws SQLException {
        txtEmp_no.setText("");
        BorrarDatos();
    }

    private void VisualizarCampos() throws SQLException {
        txtEmp_no.setText(Integer.toString(resultado.getInt(1)));
        txtApellidos.setText(resultado.getString(2));
        txtOficio.setText(resultado.getString(3));
        txtDir.setText(Integer.toString(resultado.getInt(4)));
        jDateFecha_Alt.setDate(resultado.getDate(5));
        txtSalario.setText(Float.toString(resultado.getFloat(6)));
        txtComision.setText(Float.toString(resultado.getFloat(7)));
        dept_no = resultado.getInt(8);
        VisualizarDepartamento(dept_no);
    }

    private void VisualizarDepartamento(Integer dept_no) throws SQLException {
        String[] seleccionado = null;
        int i = 0;
        boolean fin = false;
        while (i < comboDepartamento.getItemCount() && !fin) {
            seleccionado = (String[]) comboDepartamento.getItemAt(i);
            if (seleccionado[0].equals(Integer.toString(dept_no))) {
                comboDepartamento.setSelectedIndex(i);
                fin = true;
            }
            i++;
        }
    }

    private void ActivarCampos() {
        txtApellidos.setEnabled(true);
        txtSalario.setEnabled(true);
        txtOficio.setEnabled(true);
        txtDir.setEnabled(true);
        jDateFecha_Alt.setEnabled(true);
        txtSalario.setEnabled(true);
        txtComision.setEnabled(true);
    }

    ;
    private void DesactivarCampos() {
        txtApellidos.setEnabled(false);
        txtSalario.setEnabled(false);
        txtOficio.setEnabled(false);
        txtDir.setEnabled(false);
        jDateFecha_Alt.setEnabled(false);
        txtSalario.setEnabled(false);
        txtComision.setEnabled(false);
    }

    ;
    private void LlenarDepartamentos() {

        String datos[] = new String[2];
        try {
            comboDepartamento.removeAllItems(); //Borra todos los Items
            String sql = "SELECT dept_no,dnombre FROM departamentos ORDER BY dnombre";
            try (Statement consulta = ConexionSingleton.conexion.createStatement()) {
                resultado = consulta.executeQuery(sql);
                resultado.next();
                comboDepartamento.addItem(new String[]{"-1", "Seleccione Departamento..."});
                while (resultado.next()) {  //Rellena el ComboBox con los valores de la tabla DEPARTAMENTOS 
                    datos[0] = Integer.toString(resultado.getInt("dept_no")); // Almacena el código del departamento
                    datos[1] = resultado.getString("dnombre");  //Almacena el nombre
                    comboDepartamento.addItem(new String[]{datos[0], datos[1],}); //Los añade al Combo con dos columnas
                }

                comboDepartamento.setRenderer(new DefaultListCellRenderer() //Renderiza el Combo 
                {
                    @Override
                    public java.awt.Component getListCellRendererComponent(
                            JList l, Object o, int i, boolean s, boolean f) {
                        return new JLabel(((String[]) o)[1]);  //Visualiza sólo la columna 1, que es el nombre
                    }
                });
            }
            resultado.close();

        } catch (Exception e) {
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BotonPrimero;
    private javax.swing.JButton botonAnterior;
    private javax.swing.JButton botonGrabar;
    private javax.swing.JButton botonNuevo;
    private javax.swing.JButton botonSalir;
    private javax.swing.JButton botonSiguiente;
    private javax.swing.JButton botonUltimo;
    private javax.swing.JComboBox comboDepartamento;
    private com.toedter.calendar.JDateChooser jDateFecha_Alt;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JTextField txtApellidos;
    private javax.swing.JTextField txtComision;
    private javax.swing.JTextField txtDir;
    private javax.swing.JTextField txtEmp_no;
    private javax.swing.JTextField txtOficio;
    private javax.swing.JTextField txtSalario;
    // End of variables declaration//GEN-END:variables
}
